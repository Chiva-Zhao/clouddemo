<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">


    <bean id="testJobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <!-- durability 表示任务完成之后是否依然保留到数据库，默认false -->
        <property name="durability" value="true"/>
        <property name="requestsRecovery" value="true"/>
        <property name="jobClass">
            <value>
                com.zzh.cloud.job.DetailQuartzJobBean
            </value>
        </property>
        <property name="jobDataAsMap">
            <map>
                <entry key="targetObject" value="testScheduleTask"/>
                <entry key="targetMethod" value="sayHello"/>
                <!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
                <entry key="concurrent" value="false"/>
            </map>
        </property>
    </bean>

    <bean id="testJobTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="testJobDetail"/>
        </property>
        <property name="cronExpression">
            <value>0/10 * * * * ?</value><!--每10秒钟执行一次 -->
        </property>
    </bean>

    <bean id="startQuertz" lazy-init="false" autowire="no"
          class="org.springframework.scheduling.quartz.SchedulerFactoryBean"
          destroy-method="destroy">
        <!--QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 -->
        <property name="overwriteExistingJobs" value="true"/>
        <property name="startupDelay" value="2"/>
        <property name="autoStartup" value="true"/>
        <property name="triggers">
            <list>
                <ref bean="testJobTrigger"/>
            </list>
        </property>
        <property name="dataSource" ref="dataSource"/>
        <property name="applicationContextSchedulerContextKey" value="applicationContext"/>
        <property name="configLocation" value="classpath:quartz.properties"/>
    </bean>
</beans>